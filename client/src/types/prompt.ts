/**
 * Prompt type
 * -------------
 * Represents a Prompt object as defined in the backend (see server/apps/prompts/models.py and server/apps/prompts/serializers.py).
 * Used throughout the frontend for API calls, form state, and type safety.
 *
 * Fields:
 *  - id: Unique identifier (UUID string)
 *  - coach_state: The state of the coach this prompt is associated with
 *  - version: Version number of the prompt
 *  - name: Name of the prompt (optional)
 *  - description: Description of the prompt (optional)
 *  - body: The prompt body
 *  - required_context_keys: List of required context keys
 *  - allowed_actions: List of allowed action types
 *  - is_active: Whether the prompt is active
 *  - created_at: Timestamp when created (ISO string)
 *  - updated_at: Timestamp when last updated (ISO string)
 *
 * Used by: API calls (fetching, creating, updating prompts), form state, etc.
 */
export interface Prompt {
  /** UUID string, unique identifier for the prompt. */
  id: string;
  /** The state of the coach this prompt is associated with. */
  coach_state: string;
  /** Version number of the prompt. */
  version: number;
  /** Name of the prompt (optional). */
  name?: string | null;
  /** Description of the prompt (optional). */
  description?: string | null;
  /** The prompt body. */
  body: string;
  /** List of required context keys for this prompt. */
  required_context_keys: string[];
  /** List of allowed action types for this prompt. */
  allowed_actions: string[];
  /** Whether the prompt is active. */
  is_active: boolean;
  /** Timestamp when created (ISO string). */
  created_at: string;
  /** Timestamp when last updated (ISO string). */
  updated_at: string;
}

/**
 * PromptCreate type
 * -----------------
 * Used for creating a new prompt (POST request body).
 * Omits fields that are auto-generated by the backend (id, created_at, updated_at, version).
 * Used by: NewPromptForm, API calls to create prompts.
 */
export interface PromptCreate {
  coach_state: string;
  name?: string | null;
  description?: string | null;
  body: string;
  required_context_keys: string[];
  allowed_actions: string[];
  is_active?: boolean; // Optional, defaults to true on backend
}
