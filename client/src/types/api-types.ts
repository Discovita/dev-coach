/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/auth/forgot-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Initiate password reset process. */
        post: operations["auth_forgot_password_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description API view to obtain JWT tokens for existing users. */
        post: operations["auth_login_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description API view to register a new user. */
        post: operations["auth_register_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Reset password using token. */
        post: operations["auth_reset_password_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/coach/process-message": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Handle user input and get coach response for the chatbot.
         *     Step-by-step:
         *     1. Require authentication (JWT or session)
         *     2. Parse and validate the incoming request (CoachRequestSerializer)
         *     3. Retrieve the user's CoachState from the database
         *     4. Build the prompt and call the OpenAI service
         *     5. Parse the LLM response (Pydantic model), extract actions
         *     6. Apply actions to update the CoachState and related models
         *     7. Return the response using CoachResponseSerializer */
        post: operations["coach_process_message_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/core/enums": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description GET /api/enums
         *     Returns all enum values for coach_state, allowed_actions, and context_keys. */
        get: operations["core_enums_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/prompts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all prompts (only those with is_active=True).
         *     GET /api/prompts
         *     Returns: 200 OK, list of active prompts. */
        get: operations["prompts_list"];
        put?: never;
        /** @description Create a new prompt.
         *     POST /api/prompts
         *     Body: Prompt fields (see PromptSerializer)
         *     Returns: 201 Created, created prompt object.
         *     Automatically assigns the next version number for the given coaching_phase.
         *     Ignores any version sent from the frontend. */
        post: operations["prompts_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/prompts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieve a single prompt by ID.
         *     GET /api/prompts/{id}
         *     Returns: 200 OK, prompt object. */
        get: operations["prompts_retrieve"];
        /** @description Update a prompt (full update).
         *     PUT /api/prompts/{id}
         *     Body: All prompt fields (see PromptSerializer)
         *     Returns: 200 OK, updated prompt object. */
        put: operations["prompts_update"];
        post?: never;
        /** @description Delete a prompt.
         *     DELETE /api/prompts/{id}
         *     Returns: 204 No Content. */
        delete: operations["prompts_destroy"];
        options?: never;
        head?: never;
        /** @description Partially update a prompt.
         *     PATCH /api/prompts/{id}
         *     Body: Partial prompt fields (see PromptSerializer)
         *     Returns: 200 OK, updated prompt object.
         *     If an error occurs, returns a 400 or 500 with details. */
        patch: operations["prompts_partial_update"];
        trace?: never;
    };
    "/api/v1/prompts/{id}/soft_delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Soft delete a prompt: set is_active to False instead of deleting.
         *     POST /api/prompts/{id}/soft_delete
         *     Returns: 200 OK, updated prompt object with is_active=False. */
        post: operations["prompts_soft_delete_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/schema/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description OpenApi3 schema for this API. Format can be selected via content negotiation.
         *
         *     - YAML: application/vnd.oai.openapi
         *     - JSON: application/vnd.oai.openapi+json */
        get: operations["schema_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get current user data. */
        get: operations["user_me_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/me/chat-messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the authenticated user's chat messages.
         *     If the chat history is empty, add the initial bot message and return it. */
        get: operations["user_me_chat_messages_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/me/coach-state": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the authenticated user's coach state. */
        get: operations["user_me_coach_state_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/me/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get current user data, ensuring the chat history contains the initial bot message if empty. */
        get: operations["user_me_complete_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/me/identities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get the authenticated user's identities. */
        get: operations["user_me_identities_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/user/me/reset-chat-messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Reset (delete) all chat messages, identities, and user notes for the authenticated user, and reset their CoachState. */
        post: operations["user_me_reset_chat_messages_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * @description * `create_identity` - Create Identity
         *     * `update_identity` - Update Identity
         *     * `accept_identity` - Accept Identity
         *     * `accept_identity_refinement` - Accept Identity Refinement
         *     * `add_identity_note` - Add Identity Note
         *     * `transition_phase` - Transition Phase
         *     * `select_identity_focus` - Select Identity Focus
         *     * `skip_identity_category` - Skip Identity Category
         *     * `unskip_identity_category` - Unskip Identity Category
         *     * `update_who_you_are` - Update Who You Are
         *     * `update_who_you_want_to_be` - Update Who You Want to Be
         *     * `add_user_note` - Add User Note
         *     * `update_user_note` - Update User Note
         *     * `delete_user_note` - Delete User Note
         * @enum {string}
         */
        AllowedActionsEnum: "create_identity" | "update_identity" | "accept_identity" | "accept_identity_refinement" | "add_identity_note" | "transition_phase" | "select_identity_focus" | "skip_identity_category" | "unskip_identity_category" | "update_who_you_are" | "update_who_you_want_to_be" | "add_user_note" | "update_user_note" | "delete_user_note";
        /** @enum {unknown} */
        BlankEnum: "";
        /**
         * @description * `system_context` - System Context
         *     * `introduction` - Introduction
         *     * `get_to_know_you` - Get to Know You
         *     * `identity_warm_up` - Identity Warm-Up
         *     * `identity_brainstorming` - Identity Brainstorming
         *     * `identity_refinement` - Identity Refinement
         * @enum {string}
         */
        CoachingPhaseEnum: "system_context" | "introduction" | "get_to_know_you" | "identity_warm_up" | "identity_brainstorming" | "identity_refinement";
        /** @enum {unknown} */
        NullEnum: null;
        /** @description Serializer for the Prompt model.
         *     Used in API endpoints to serialize/deserialize Prompt instances.
         *     Fields:
         *         - id: UUID of the prompt
         *         - owner: User who owns the prompt
         *         - version: Version number of the prompt
         *         - name: Name of the prompt
         *         - description: Description of the prompt
         *         - body: The prompt body
         *         - required_context_keys: List of required context keys
         *         - allowed_actions: List of allowed action types
         *         - is_active: Whether the prompt is active
         *         - created_at: Timestamp when created
         *         - updated_at: Timestamp when last updated
         *     Used by: server/apps/prompts/views.py (PromptViewSet) */
        PatchedPrompt: {
            /**
             * Format: uuid
             * @description Unique identifier for this object.
             */
            readonly id?: string;
            /** @description The phase of the coach this prompt is associated with.
             *
             *     * `system_context` - System Context
             *     * `introduction` - Introduction
             *     * `get_to_know_you` - Get to Know You
             *     * `identity_warm_up` - Identity Warm-Up
             *     * `identity_brainstorming` - Identity Brainstorming
             *     * `identity_refinement` - Identity Refinement */
            coaching_phase?: (components["schemas"]["CoachingPhaseEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /**
             * @description Version number of the prompt
             * @default 1
             */
            version: number;
            name?: string | null;
            description?: string | null;
            /** @description Prompt body */
            body?: string;
            /** @description List of required context keys for this prompt. */
            required_context_keys?: components["schemas"]["RequiredContextKeysEnum"][];
            /** @description List of allowed action types for this prompt. */
            allowed_actions?: components["schemas"]["AllowedActionsEnum"][];
            /** @description Type of prompt (coach, sentinel, system, etc.)
             *
             *     * `coach` - Coach
             *     * `sentinel` - Sentinel
             *     * `system` - System */
            prompt_type?: components["schemas"]["PromptTypeEnum"];
            /** @description Is this prompt active? */
            is_active?: boolean;
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        /** @description Serializer for the Prompt model.
         *     Used in API endpoints to serialize/deserialize Prompt instances.
         *     Fields:
         *         - id: UUID of the prompt
         *         - owner: User who owns the prompt
         *         - version: Version number of the prompt
         *         - name: Name of the prompt
         *         - description: Description of the prompt
         *         - body: The prompt body
         *         - required_context_keys: List of required context keys
         *         - allowed_actions: List of allowed action types
         *         - is_active: Whether the prompt is active
         *         - created_at: Timestamp when created
         *         - updated_at: Timestamp when last updated
         *     Used by: server/apps/prompts/views.py (PromptViewSet) */
        Prompt: {
            /**
             * Format: uuid
             * @description Unique identifier for this object.
             */
            readonly id: string;
            /** @description The phase of the coach this prompt is associated with.
             *
             *     * `system_context` - System Context
             *     * `introduction` - Introduction
             *     * `get_to_know_you` - Get to Know You
             *     * `identity_warm_up` - Identity Warm-Up
             *     * `identity_brainstorming` - Identity Brainstorming
             *     * `identity_refinement` - Identity Refinement */
            coaching_phase: (components["schemas"]["CoachingPhaseEnum"] | components["schemas"]["BlankEnum"] | components["schemas"]["NullEnum"]) | null;
            /**
             * @description Version number of the prompt
             * @default 1
             */
            version: number;
            name?: string | null;
            description?: string | null;
            /** @description Prompt body */
            body: string;
            /** @description List of required context keys for this prompt. */
            required_context_keys?: components["schemas"]["RequiredContextKeysEnum"][];
            /** @description List of allowed action types for this prompt. */
            allowed_actions?: components["schemas"]["AllowedActionsEnum"][];
            /** @description Type of prompt (coach, sentinel, system, etc.)
             *
             *     * `coach` - Coach
             *     * `sentinel` - Sentinel
             *     * `system` - System */
            prompt_type?: components["schemas"]["PromptTypeEnum"];
            /** @description Is this prompt active? */
            is_active?: boolean;
            /** Format: date-time */
            readonly created_at: string;
            /** Format: date-time */
            readonly updated_at: string;
        };
        /**
         * @description * `coach` - Coach
         *     * `sentinel` - Sentinel
         *     * `system` - System
         * @enum {string}
         */
        PromptTypeEnum: "coach" | "sentinel" | "system";
        /**
         * @description * `user_name` - User Name
         *     * `identities` - Identities
         *     * `number_of_identities` - Number of Identities
         *     * `identity_focus` - Identity Focus
         *     * `who_you_are` - Who You Are
         *     * `who_you_want_to_be` - Who You Want to Be
         *     * `focused_identities` - Focused Identities
         *     * `user_notes` - User Notes
         *     * `current_message` - Current Message
         *     * `previous_message` - Previous Message
         *     * `current_phase` - Current Phase
         *     * `brainstorming_category_context` - Brainstorming Category Context
         * @enum {string}
         */
        RequiredContextKeysEnum: "user_name" | "identities" | "number_of_identities" | "identity_focus" | "who_you_are" | "who_you_want_to_be" | "focused_identities" | "user_notes" | "current_message" | "previous_message" | "current_phase" | "brainstorming_category_context";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    auth_forgot_password_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    auth_login_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    auth_register_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    auth_reset_password_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    coach_process_message_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    core_enums_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    prompts_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Prompt"][];
                };
            };
        };
    };
    prompts_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Prompt"];
                "application/x-www-form-urlencoded": components["schemas"]["Prompt"];
                "multipart/form-data": components["schemas"]["Prompt"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Prompt"];
                };
            };
        };
    };
    prompts_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Prompt"];
                };
            };
        };
    };
    prompts_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Prompt"];
                "application/x-www-form-urlencoded": components["schemas"]["Prompt"];
                "multipart/form-data": components["schemas"]["Prompt"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Prompt"];
                };
            };
        };
    };
    prompts_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    prompts_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedPrompt"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedPrompt"];
                "multipart/form-data": components["schemas"]["PatchedPrompt"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Prompt"];
                };
            };
        };
    };
    prompts_soft_delete_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Prompt"];
                "application/x-www-form-urlencoded": components["schemas"]["Prompt"];
                "multipart/form-data": components["schemas"]["Prompt"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Prompt"];
                };
            };
        };
    };
    schema_retrieve: {
        parameters: {
            query?: {
                format?: "json" | "yaml";
                lang?: "af" | "ar" | "ar-dz" | "ast" | "az" | "be" | "bg" | "bn" | "br" | "bs" | "ca" | "ckb" | "cs" | "cy" | "da" | "de" | "dsb" | "el" | "en" | "en-au" | "en-gb" | "eo" | "es" | "es-ar" | "es-co" | "es-mx" | "es-ni" | "es-ve" | "et" | "eu" | "fa" | "fi" | "fr" | "fy" | "ga" | "gd" | "gl" | "he" | "hi" | "hr" | "hsb" | "hu" | "hy" | "ia" | "id" | "ig" | "io" | "is" | "it" | "ja" | "ka" | "kab" | "kk" | "km" | "kn" | "ko" | "ky" | "lb" | "lt" | "lv" | "mk" | "ml" | "mn" | "mr" | "ms" | "my" | "nb" | "ne" | "nl" | "nn" | "os" | "pa" | "pl" | "pt" | "pt-br" | "ro" | "ru" | "sk" | "sl" | "sq" | "sr" | "sr-latn" | "sv" | "sw" | "ta" | "te" | "tg" | "th" | "tk" | "tr" | "tt" | "udm" | "ug" | "uk" | "ur" | "uz" | "vi" | "zh-hans" | "zh-hant";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/vnd.oai.openapi": {
                        [key: string]: unknown;
                    };
                    "application/yaml": {
                        [key: string]: unknown;
                    };
                    "application/vnd.oai.openapi+json": {
                        [key: string]: unknown;
                    };
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    user_me_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_me_chat_messages_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_me_coach_state_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_me_complete_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_me_identities_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_me_reset_chat_messages_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
